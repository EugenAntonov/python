# -*- coding: utf-8 -*-
"""
Created on Thu Jan 27 15:38:52 2022

@author: 1
"""
"""
1. Реализовать функцию, принимающую два числа (позиционные аргументы) 
и выполняющую их деление. Числа запрашивать у пользователя, 
предусмотреть обработку ситуации деления на ноль.
"""

def my_function(a,b):
    if b == 0:
        return "На ноль делить нельзя!"
    else:
        return a/b
a = int(input("Введите числитель: "))
b = int(input("Введите знаменатель: "))
print("Вот результат деления: ", my_function(a,b))





"""
2. Выполнить функцию, которая принимает несколько параметров, 
описывающих данные пользователя: имя, фамилия, год рождения, город проживания, 
email, телефон. Функция должна принимать параметры как именованные аргументы. 
Осуществить вывод данных о пользователе одной строкой.
"""

def user_description(name, last_name, year_birth, location, email, phone):
    print(f"имя - {name}|фамилия - {last_name}|год рождения - {year_birth}|город проживания - {location}|эл.почта - {email}|телефон - {phone}")

user_description("Карл", "Брюллов", "1830", "Петербург", "k.brullov@gmail.com", "555-33-11")




"""
3. Реализовать функцию my_func(), которая принимает три позиционных аргумента 
и возвращает сумму наибольших двух аргументов.
"""

def my_func(a,b,c):
    list1 = [a,b,c]
    return sum(list1)-min(list1)
            
print(my_func(23, 3, 7))





"""
4. Программа принимает действительное положительное число x и целое отрицательное число y. 
Выполните возведение числа x в степень y. 
Задание реализуйте в виде функции my_func(x, y). 
При решении задания нужно обойтись без встроенной функции возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. 
Первый — возведение в степень с помощью оператора **. 
Второй — более сложная реализация без оператора **, предусматривающая использование цикла.
"""

k=2
l=-6

def my_func(a,b):
    return a**b
print(my_func(k, l))


def my_func(a,b):
    c = 1
    for i in range(abs(b)):
        c *= a 
    return 1/c
print(my_func(k, l))





"""
5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. 
При нажатии Enter должна выводиться сумма чисел. 
Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. 
Сумма вновь введённых чисел будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. 
Если специальный символ введён после нескольких чисел, то вначале нужно 
добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
"""

def my_function5 ():
    a = input("Введите числа через пробел: ")
    list_new = a.split(" ")
    for i in range(len(list_new)):
        if list_new[i].isnumeric():
            list1.append(int(list_new[i]))
        else:         
            return False
    return True

list1 = []
x = True
while x == True:
    x = my_function5()
    print(sum(list1))




"""
6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв 
и возвращающую их же, но с прописной первой буквой. 
Например, print(int_func(‘text’)) -> Text.
"""

def int_func(input_text):
    output_text = input_text.capitalize()   
    return output_text

print(int_func("text"))






"""
7. Продолжить работу над заданием. В программу должна попадать строка из слов, 
разделённых пробелом. Каждое слово состоит из латинских букв в нижнем регистре. 
Нужно сделать вывод исходной строки, но каждое слово должно начинаться с 
заглавной буквы. Используйте написанную ранее функцию int_func().
"""

str7 = "oops i did it again"
print("Before: ", str7)

list7 = str7.split(" ")
for i in range(len(list7)):
    list7[i] = int_func(list7[i])
    i+=1
str7 = " ".join(list7)

print("After: ", str7)

