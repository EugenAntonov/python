"""
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчёта 
заработной платы сотрудника. Используйте в нём формулу: 
(выработка в часах*ставка в час) + премия. Во время выполнения расчёта 
для конкретных значений необходимо запускать скрипт с параметрами.
"""

# python C:\Users\1\Documents\GitHub\my_script1.py 10 40 200


"""    
2. Представлен список чисел. Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""
import random

my_list=[random.randint(0, 100) for x in range(20)]
print(my_list)

new_list=[]
a = my_list[0]
i = 0
while i < len(my_list)-1:   
    if my_list[i+1]>my_list[i]:
        new_list.append(my_list[i+1])
    i +=1

print(new_list)

"""
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.
"""

print([x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0])


"""
4. Представлен список чисел. Определите элементы списка, не имеющие повторений. 
Сформируйте итоговый массив чисел, соответствующих требованию. 
Элементы выведите в порядке их следования в исходном списке. 
Для выполнения задания обязательно используйте генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

# my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
my_list=[random.randint(0, 10) for x in range(20)]
print(my_list)

new_list=[x for x in my_list if my_list.count(x) == 1]
print(new_list)



"""
5. Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти чётные числа от 100 до 1000 (включая границы). 
Нужно получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""

import functools
# variant 1 
def my_function(prev_el,el):
    return prev_el*el
    
my_list=[x for x in range(100,1001) if x % 2 == 0]
print(functools.reduce(my_function, my_list))

# variant 2
print(functools.reduce(lambda a,b: a*b, my_list))


"""
6. Реализовать два небольших скрипта:
итератор, генерирующий целые числа, начиная с указанного;
итератор, повторяющий элементы некоторого списка, определённого заранее. 
Подсказка: используйте функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Предусмотрите условие его завершения. #### Например, в первом задании 
выводим целые числа, начиная с 3. При достижении числа 10 — завершаем цикл. 
Вторым пунктом необходимо предусмотреть условие, при котором 
повторение элементов списка прекратится.
"""

from itertools import count

def my_func(a): 
    for el in count(a):
        if el > 25:
            break
        else:
            print(el)

a = int(input("Enter start number: "))
my_func(a)

my_list=['a','b', 12, 13, 14, 15,'xx']
from itertools import cycle
def my_func2(a):
    с = 0
    for el in cycle(a):
        if с == len(a)*2:
            break
        print(el)
        с += 1

my_func2(my_list)



"""
7. Реализовать генератор с помощью функции с ключевым словом yield, 
создающим очередное значение. При вызове функции должен создаваться 
объект-генератор. Функция вызывается следующим образом: for el in fact(n). 
Она отвечает за получение факториала числа. В цикле нужно выводить только 
первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. 
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""
def fact(n):
    new_list=[]
    for x in range(1, n+1):
        result = 1
        for i in range(1, x+1):
            result = result * i
        new_list.append(result)    
    return new_list


def generator(n):
    for el in fact(n):
        yield el
        # print(el)

g = generator(10)

for el in g:
     print(el)






